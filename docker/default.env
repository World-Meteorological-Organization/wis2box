# data paths and retention
WIS2BOX_DATADIR=/data/wis2box
WIS2BOX_DATA_RETENTION_DAYS=7

# API
WIS2BOX_API_TYPE=pygeoapi
WIS2BOX_API_URL=http://localhost:8999/oapi
WIS2BOX_API_CONFIG=/data/wis2box/wis2box-api-config.yml
WIS2BOX_API_BACKEND_TYPE=Elasticsearch
WIS2BOX_API_BACKEND_URL=http://elasticsearch:9200
WIS2BOX_DOCKER_API_URL=http://wis2box-api:80/oapi

# logging
WIS2BOX_LOGGING_LOGLEVEL=ERROR
WIS2BOX_LOGGING_LOGFILE=stdout

# PubSub
WIS2BOX_BROKER=mqtt://wis2box:wis2box@mosquitto
WIS2BOX_BROKER_PUBLIC=mqtt://localhost:1883

# other
WIS2BOX_OSCAR_API_TOKEN=some_token
WIS2BOX_URL=http://localhost:8999

# mappings of topic hierarchy to wis2box data plugins
# optionally override default mappings from wis2box data plugins
# WIS2BOX_DATADIR_DATA_MAPPINGS=${PWD}/wis2box-data-mappings.yml

# access control
WIS2BOX_AUTH_STORE=/data/wis2box/auth.db

# storage
WIS2BOX_STORAGE_TYPE=S3

# url-endpoint of a S3 service.
S3_ENDPOINT=http://minio:9000
# Access key (aka user ID) of your account in S3 service.
S3_USER=minio
# Secret Key (aka password) of your account in S3 service.
S3_PASSWORD=minio123
# S3 bucket to be used for incoming-data on wis2box, will be created if not yet exist
S3_BUCKET_INCOMING='wis2box-incoming'
# S3 bucket to be used for public-data on wis2box, will be created if not yet exist 
S3_BUCKET_PUBLIC='wis2box-public' 

#minio
MINIO_ROOT_USER=$S3_USER
MINIO_ROOT_PASSWORD=$S3_PASSWORD
MINIO_NOTIFY_MQTT_ENABLE_WIS2BOX=on
MINIO_NOTIFY_MQTT_USERNAME_WIS2BOX=wis2box
MINIO_NOTIFY_MQTT_PASSWORD_WIS2BOX=wis2box
MINIO_NOTIFY_MQTT_BROKER_WIS2BOX=tcp://mosquitto:1883
MINIO_NOTIFY_MQTT_TOPIC_WIS2BOX=wis2box-storage/minio